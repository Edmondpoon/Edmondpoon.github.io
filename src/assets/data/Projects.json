[
  {"name": "Tetris",
    "date": "August 2020 - December 2020",
    "language": "Python and Pygame",
    "github" : "https://github.com/Edmondpoon/Tetris",
    "description": "A program that allows the user to play a game of tetris.",
    "display": ["/tetris/hold.png", "/tetris/start.png"],
    "video": "/tetris/tetris.mp4",
    "info": ["This project was my first large project that aims to recreate Tetris using Python and the Pygame module. The program is equipped with the majority of the aspects of the original game, including the increase drop speed/points gained with higher levels and the ability to soft/hard drop blocks.", "NEWLINE", "Though there are numerous changes I would have implemented compared to the original design of the program, I found this project to be a perfect opportunity to put what I learned to use and complete something I could be proud of.",
        "NEWLINE", "With the completion of this project, I feel as though I was able to further develop my programming style and learn new skills/implementations that I can apply to future projects, which includes increasing the reusablity of code and partitioning code into separate files rather than clumping them all into a single file."]
  },
  {"name": "Checkers",
    "date": "March 2021 - April 2021",
    "language": "Python and Pygame",
    "github" : "https://github.com/Edmondpoon/2p-comp-checkers",
    "description": "A program that allows the user to play a game of checkers against a simple bot.",
    "display": ["/checkers/end.png", "/checkers/start.png"],
    "video": "/checkers/checkers.mp4",
    "info": ["This project was the second rendition of my attempts to emulate a popular game, in this case, Checkers. The original idea was to allow two users to compete with each other, but I eventually decided to include a simple algorithm that a single user could play against. Although the algorithm is nothing compared to the computer AIs implemented by other game engines, I found the idea of deciding which aspects would make a better move to be extremely interesting and fun to implement.",
        "NEWLINE", "As for this project, I attempted to increase the readability of the code and separate code into functions in hopes of having an easier time when adding features or fixing any possible bugs."]
  },
  {"name": "Huffman Coding",
    "date": "October 2021 - November 2021",
    "language": "C",
    "github" : "https://github.com/Edmondpoon/Huffman-Coding",
    "description": "A program that uses huffman coding to encode and decode any file.",
    "display": ["/huffman/huffman.png", "/huffman/decode.png", "/huffman/encode.png"],
    "video": "/huffman/huffman.mp4",
    "info": ["This program was a school project that I had completed in the Fall of 2021 at UCSC and consists of two executables that emulate the process of Huffman Coding. Huffman coding is known as a lossless data compression algorithm that is able to encode and decode data without losing any of the original data and attempts to reduce the number of bytes needed to convey the original data.",
        "NEWLINE", "The Huffman Coding program was broken down into two executables: one designed to use Huffman encoding to encode any file and attempt to reduce the size of the data while the other was designed to use Huffman decoding to decode any encoded file. All encoded files will have a specific header containing a magic word to differentiate it from other files and meta data needed to decode the data.",
        "NEWLINE", "The Huffman encoding program aims to properly encode any data, whether it's from a file or from standard input, via Huffman coding and offer statistics regarding the space (bytes) saved. Note that it is possible to lose space (use more bytes in the compression) with certain files.",
        "NEWLINE", "As for the Huffman decoding program, it aims to take any encoded data (encoded via the encode executable mentioned above) from standard input or a file and output the original data without any loss in data.",
        "NEWLINE", "This project was one of my first experiences implementing numerous abstract data types from scratch (stack, min heap, priority queue, and bit vector) and gain a deeper understanding of the characteristics of each. Additionally, through the use of lower level function calls such as the read and write functions to emulate the more higher-level functions, I was able to understand how some of the functions I would commonly use (printf, scanf, etc.) was implemented and realize the importance of understanding the tools you use."]
  },
  {"name": "Public-Key Encryption",
    "date": "November 2021",
    "language": "C",
    "github" : "https://github.com/Edmondpoon/Public-Key-Cryptography",
    "description": "A program that emulates the process of RSA key generation and the RSA algorithm.",
    "display": ["/rsa/decrypt.png", "/rsa/524.png", "/rsa/encrypt.png", "/rsa/key.png", "/rsa/keygen.png"],
    "video": "/rsa/rsa.mp4",
    "info": ["This project was a school project that I had completed in the Fall of 2021 at UCSC and consists of three executables that emulate the process of RSA key generation and RSA algorithm. The program was broken down into three executables that help implement the key generation, file encryption, and file decryption using the aforementioned RSA algorithm.",
        "NEWLINE", "The key generation was designed to create two RSA keys (public and private) that will enable the algorithm used to encrypt and decrypt files with a certain level of confidentiality To generate the prime numbers associated with the resultant keys, the program uses the Miller-Rabin primality tests to efficiently identify highly probably prime numbers that satisfy the user's specifications (number of bits that compose the key).",
        "NEWLINE", "The encryption program was designed to take either data from standard input or a specific file and encrypt the bytes with a specified public key. Once encrypted, the program will either output the data to standard output or to a specified file.",
        "NEWLINE", "The decryption program is similar to the encryption program except it aims to decrypt encrypted files, whether they are inputted via standard input or a file. Similar to the encrypt program, the decrypted data will either be sent to standard output or a specified file.",
        "NEWLINE", "This project was my first encounter with the GMP library, which allowed for integers larger than 64 bits and the possibility for more secure keys, and allowed me to experience C libraries that I might have overlooked otherwise. Additionally, it was a good opportunity to practice reading documentation about things that I would not normally utilize."]
  },
  {"name": "Portfolio Webpage",
    "date": "August 2022",
    "language": "React and Javascript",
    "github": "https://github.com/Edmondpoon/Edmondpoon.github.io",
    "description": "A web application written in React and Javascript that holds info about all my projects and information.",
    "display": ["/portfolio/home.png", "/portfolio/opened.png", "/portfolio/projects.png", "/portfolio/resume.png", "/portfolio/search.png"],
    "video": "/portfolio/portfolio.mp4",
    "info": ["This project was one of my first attempts at using React to create a web application. Although the first iteration of this webpage followed the same approach, with the ability to view projects, resume, and information, it also had many bugs and issues with its implementation. On the other hand, this newer implementation allows for a responsive view with a cleaner and more reactive design and view.",
        "NEWLINE", "The main purpose of this webpage is to aggregate all the work I’ve done since the start of my Computer Science career and provide cleaner and succinct versions of everything. While working on this project, I was able to learn more about the designing aspect of programming as well as practice some of the topics that are vital to React, including functional components and hooks."]
  },
  {"name": "Full-Stack Email Manager",
    "date": "July 2022",
    "language": "React, Express, Javascript, Postgresql",
    "github": "PRIVATED",
    "description": "A full-stack web application that emulates a gmail interface, including composing and viewing stored emails.",
    "display": ["/email/login.png", "/email/compose.png", "/email/inbox.png", "/email/move.png", "/email/openEmail.png", "/email/searchbar.png", "/email/select.png"],
    "video": "/email/email.mp4",
    "info": ["This school project was a aggregation of the work I did during a summer course in July 2022. Beginning with implementing simple CSS style sheets and html pages, we slowly incorporated aspects of the full-stack development cycle into the assignments and eventually this project, including a backend database as well as a webpage stored on the server-side.",
        "NEWLINE", "The goal of this project was to implement an email interface akin to the gmail experience, with numerous features including composing emails, sending mail to the trash, and marking emails as favorited/unread. However, we were expected to design the features and UI to match what a client had requests (the client being the assignment in this case).",
        "NEWLINE", "Working with all the previous I had already finished in the class, I had a rough idea on how to implement each feature requested while ensuring it fits a full-stack web application.",
        "NEWLINE", "The backend I used was postgresql that was used to store data associated with the emails associated with different users as well as information that would allow different “users” to login and view their specific emails. Specifically, All users would begin on a login page, where the password they enter would be encrypted and compared to the stored password, which ensures only authorized users can view emails. As for the data for the emails, I created three tables to represent a user, a mailbox, and an individual mail to allow for each user to have the same named mailboxes and emails without conflicts.",
        "NEWLINE", "For the frontend side, I used React and Javascript to render create the user interface. The main tools I used for this side were functional components and React hooks to meet the “clients” request. The main issue I faced when working on this section was ensuring everything remained updated while the user interacted with the different features, whether a user favorited an email while it was opened or a user marked an email as unread. However, these were eventually addressed by altering my implementation such that hooks would be able to correctly rerender when a state was changed by the user.",
        "NEWLINE", "Lastly, I used Express to connect the browser with the backend, which was used to store the user’s login information and their data. This step had one of the steepest learning curves for me, with the schemas needed to formally document the API and provide user’s with a relatively strict model via openApi, but became easier as I updated and expanded the available endpoints.",
        "NEWLINE", "This project was extremely fun to work on, with the introduction to many new technologies including React and Sql, and allowed me to explore many things I might have otherwise glanced over before. I got to understand the connections between the different sections of a full-stack application as well as the basics of creating an API that can be used in public."]
  },
  {"name": "Multi-Threaded HTTP Server",
    "date": "April 2022",
    "language": "C",
    "github": "https://github.com/Edmondpoon/multithreaded-httpserver",
    "description": "A Multi-threaded HTTP server that supports HEAD, APPEND, PUT, and GET requests.",
    "display": ["/server/vid.png", "/server/log.png", "/server/diff.png"],
    "video": "/server/server.mp4",
    "info": ["This project was my first exploration of multi-threading and the general idea of HTTP servers. Starting with a simple single-threaded HTTP server supporting three types of requests, one of which not being an actual HTTP method: Get, Put, and Append.",
        "NEWLINE", "Get requests simply ask the server to serve up data that is stored on the server, which would be some file content in this case. A Put request in this server will attempt to overwrite the data in a file with some new content, creating the file if it didn’t already exist on the server. Lastly, Append requests are similar to Put requests but rather than overwriting a file, it would append to the file on the server as the name suggests.",
        "NEWLINE", "The first step I took in this project took some time understanding the strict nature of HTTP requests, with the limitless number of different requests possible, but I was eventually able to create a version I was proud of. With the prototype finished, I slowly incorporated thread pools and multi-threading to allow for a higher throughput for potential requests and ideally support a more efficient server. The swap to a multi-threaded model was a lot more difficult than anticipated, with a lot of time debugging the cryptic and subtle errors, incrementally implementing features helped stabilize the process and helped me develop my programming style to fit a more modularized and bottom-up approach.",
        "NEWLINE", "Over the course of the few weeks I spent implementing the server, I was able to understand the power could be associated with multi-threading as well as the potential pitfalls, including the large spike in complexity in both the code base and development. Although I may still have much to learn about the topic, this project has allowed for a better understanding and a great introduction to the field."]
  }
]
